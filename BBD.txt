import React from "react";
import {
  Drawer,
  Box,
  Typography,
  IconButton,
  Stepper,
  Step,
  StepLabel,
  TextField,
  Button,
  MenuItem,
} from "@mui/material";
import CancelOutlinedIcon from "@mui/icons-material/CancelOutlined";

interface CreateStoryProps {
  open: boolean;
  onClose: () => void;
  onAccepted: () => void;
  issueKey: string;
}

const steps = [
  "Story Details",
  "Prompt & Context",
  "AI Generated Draft",
  "Review & Finalize",
];

export default function CreateStory({
  open,
  onClose,
  onAccepted,
  issueKey,
}: CreateStoryProps) {
  const [activeStep, setActiveStep] = React.useState(0);

  const handleNext = () => {
    if (activeStep < steps.length - 1) {
      setActiveStep((prev) => prev + 1);
    } else {
      onAccepted();
    }
  };

  const handleBack = () => {
    if (activeStep > 0) {
      setActiveStep((prev) => prev - 1);
    }
  };

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      variant="temporary"
      sx={{
        "& .MuiDrawer-paper": {
          width: "900px",
          maxWidth: "100%",
          height: "100%",
          display: "flex",
          flexDirection: "column",
        },
      }}
    >
      {/* Header */}
      <Box
        sx={{
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between",
          p: 2,
          borderBottom: 1,
          borderColor: "divider",
        }}
      >
        <Typography variant="h6" fontWeight="bold">
          Create New Story
        </Typography>
        <IconButton onClick={onClose} size="small">
          <CancelOutlinedIcon />
        </IconButton>
      </Box>

      {/* Body */}
      <Box sx={{ flex: 1, display: "flex", overflow: "hidden" }}>
        {/* Left Sidebar (Stepper) */}
        <Box
          sx={{
            width: 220,
            borderRight: 1,
            borderColor: "divider",
            p: 2,
          }}
        >
          <Stepper
            activeStep={activeStep}
            orientation="vertical"
            sx={{ height: "100%" }}
          >
            {steps.map((label) => (
              <Step key={label}>
                <StepLabel>{label}</StepLabel>
              </Step>
            ))}
          </Stepper>
        </Box>

        {/* Right Form Content */}
        <Box sx={{ flex: 1, p: 4 }}>
          {activeStep === 0 && (
            <>
              <Typography variant="h6" gutterBottom>
                Story Details
              </Typography>
              <Box sx={{ display: "grid", gap: 3, maxWidth: 600 }}>
                <TextField
                  select
                  label="Project"
                  value="CMLD"
                  size="small"
                  fullWidth
                >
                  <MenuItem value="CMLD">CMLD</MenuItem>
                </TextField>

                <TextField
                  select
                  label="Issue Type"
                  value="Story"
                  size="small"
                  fullWidth
                >
                  <MenuItem value="Story">Story</MenuItem>
                </TextField>

                <TextField
                  select
                  label="Feature"
                  value="CMLAD-1234"
                  size="small"
                  fullWidth
                >
                  <MenuItem value="CMLAD-1234">CMLAD-1234</MenuItem>
                </TextField>

                <TextField
                  label="Add your description / Requirement"
                  placeholder="Min. 5 characters"
                  multiline
                  minRows={4}
                  fullWidth
                />
              </Box>
            </>
          )}
        </Box>
      </Box>

      {/* Footer Buttons */}
      <Box
        sx={{
          p: 2,
          borderTop: 1,
          borderColor: "divider",
          display: "flex",
          justifyContent: "flex-end",
          gap: 2,
        }}
      >
        <Button onClick={onClose} variant="outlined">
          Cancel
        </Button>
        <Button onClick={handleNext} variant="contained" color="primary">
          {activeStep === steps.length - 1 ? "Finish" : "Next"}
        </Button>
      </Box>
    </Drawer>
  );
}
