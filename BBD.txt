Hi All,

While debugging the issue, I noted the following:

FE Update Required: The WFSearchableDropdown component should auto-select the default value if only one option is available. Currently, the UI framework only sets the default option, but not the value.
Edge Case Handling: The application dispatches updateField to set the value when a single option exists. However, we need to ensure that when the value is set, the message field is explicitly set to an empty string "" (not undefined). Currently, message defaults to undefined.
Why should message be set to ""?
On blur of WFSearchableDropdown, the framework checks if message is undefined and sets showMessage = true. Application logic then disables the submit button. To avoid this, we need to explicitly set message to "".

Alternative:
We could modify the showMessage condition to handle both undefined and "", but since the current logic is tested and verified, the above approach is more practical for now.

I’ve made the necessary changes in this PR for reference.


Thanks for the detailed questions and feedback. Please find my responses below:

For PR and release builds, we’ll need support from the DARE team since we don’t have access to configure Jenkins directly. Therefore, we cannot estimate exact time savings without collaborating with them.
For BDD Jenkins jobs, we tried a quick workaround by tweaking the job without deleting the workspace. We observed a time savings of approximately 15–20 minutes by skipping npm install.
Regarding cache management:

Yes, if we have different Jenkins jobs for each environment (e.g., RVQA, HQA), we will need to maintain separate cache folders for each, as the package-lock.json may vary across branches (feature, develop, RQA, etc.).
However, we propose caching only for active versions (e.g., develop, release) and not for stale or obsolete branches. The cache for a branch will be overwritten with the latest node_modules if any package update is detected.
The typical size of node_modules ranges between 600MB to 900MB depending on the application. Based on current usage, this is manageable. We can also explore adding clean-up scripts to manage disk space proactively if needed.





Subject: Optimized and Compliant Approach to Reduce Build Time

Hi [Recipient's Name],

Thank you for your input regarding the mandatory use of npm install in every build due to enterprise policies around Artifactory sync and security compliance.

To address the build time concerns while still aligning with compliance requirements, I’d like to propose an enhanced and safe flow that leverages npm ci --dry-run as a validation step.

Problem Statement:
Currently, our Jenkins jobs execute npm install during every build (PR, Release, and Automation), regardless of whether the dependencies have changed. This significantly increases build time, especially as the dependency tree grows.

At the same time, we must ensure we remain in sync with Artifactory, as libraries may be dynamically removed or updated due to vulnerability scans by enterprise tools.

Proposed Solution: Conditional Install with Dry Run Validation
Cache the node_modules folder in Jenkins (either in workspace or shared storage).
Detect changes in package-lock.json using a checksum comparison.
If no changes:
Run npm ci --dry-run to verify that all dependencies are still available in Artifactory.
If the dry run passes, copy the cached node_modules to the build and skip npm install.
If the dry run fails, fall back to a full npm install.
If changes are detected in the lock file, always run npm install, and update the cache accordingly.
Advantages:
Significantly reduces build time by avoiding unnecessary installs.
Fully compliant with enterprise Artifactory sync requirements.
Ensures packages are not stale or unavailable by verifying via npm ci --dry-run.
Lightweight and easy to integrate into existing Jenkins pipelines.
This flow ensures we maintain both speed and compliance without risking dependency issues.

Let me know your thoughts. If acceptable, I can start implementing this in a POC with support from the DARE team.

Best regards,
[Your Name]

