Subject: Optimized and Compliant Approach to Reduce Build Time

Hi [Recipient's Name],

Thank you for your input regarding the mandatory use of npm install in every build due to enterprise policies around Artifactory sync and security compliance.

To address the build time concerns while still aligning with compliance requirements, Iâ€™d like to propose an enhanced and safe flow that leverages npm ci --dry-run as a validation step.

Problem Statement:
Currently, our Jenkins jobs execute npm install during every build (PR, Release, and Automation), regardless of whether the dependencies have changed. This significantly increases build time, especially as the dependency tree grows.

At the same time, we must ensure we remain in sync with Artifactory, as libraries may be dynamically removed or updated due to vulnerability scans by enterprise tools.

Proposed Solution: Conditional Install with Dry Run Validation
Cache the node_modules folder in Jenkins (either in workspace or shared storage).
Detect changes in package-lock.json using a checksum comparison.
If no changes:
Run npm ci --dry-run to verify that all dependencies are still available in Artifactory.
If the dry run passes, copy the cached node_modules to the build and skip npm install.
If the dry run fails, fall back to a full npm install.
If changes are detected in the lock file, always run npm install, and update the cache accordingly.
Advantages:
Significantly reduces build time by avoiding unnecessary installs.
Fully compliant with enterprise Artifactory sync requirements.
Ensures packages are not stale or unavailable by verifying via npm ci --dry-run.
Lightweight and easy to integrate into existing Jenkins pipelines.
This flow ensures we maintain both speed and compliance without risking dependency issues.

Let me know your thoughts. If acceptable, I can start implementing this in a POC with support from the DARE team.

Best regards,
[Your Name]

