import React, { useState } from "react";
import {
  Container,
  TextField,
  Button,
  Typography,
  Grid,
  Paper,
  IconButton,
} from "@material-ui/core";
import { useForm, useFieldArray, Controller } from "react-hook-form";
import { Add, Remove } from "@material-ui/icons";

const MockDataForm = () => {
  const {
    control,
    register,
    handleSubmit,
    reset,
    setValue,
    getValues,
    watch,
  } = useForm({
    defaultValues: {
      requestUrl: "",
      requestMethod: "",
      responseStatusCode: "",
      response: "",
      responseHeaders: [{}],
      parameterizedRequestScenarios: [],
    },
  });

  const { fields: scenarios, append, remove } = useFieldArray({
    control,
    name: "parameterizedRequestScenarios",
  });

  const addScenario = () => {
    append({
      responseStatusCode: "",
      response: "",
      responseHeaders: [{}],
      scenarios: [],
    });
  };

  const addSubScenario = (scenarioIndex) => {
    const existingScenarios = getValues(
      `parameterizedRequestScenarios[${scenarioIndex}].scenarios`
    );
    setValue(
      `parameterizedRequestScenarios[${scenarioIndex}].scenarios`,
      [
        ...(existingScenarios || []),
        {
          uniqueIdentifier: "",
          requestURLQueryParameters: [{}],
          requestPayload: [{}],
        },
      ]
    );
  };

  const onSubmit = (data) => {
    console.log("Form Data:", data);
    // Perform API call to save data
  };

  return (
    <Container maxWidth="md">
      <Typography variant="h4" gutterBottom>
        Add Mock Data
      </Typography>
      <form onSubmit={handleSubmit(onSubmit)}>
        <Paper style={{ padding: 16, marginBottom: 16 }}>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <TextField
                label="Request URL"
                name="requestUrl"
                fullWidth
                variant="outlined"
                inputRef={register({ required: "Request URL is mandatory" })}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                label="Request Method"
                name="requestMethod"
                fullWidth
                variant="outlined"
                select
                SelectProps={{ native: true }}
                inputRef={register({ required: "Request Method is mandatory" })}
              >
                <option value="">Select Method</option>
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="PATCH">PATCH</option>
                <option value="DELETE">DELETE</option>
              </TextField>
            </Grid>
            <Grid item xs={6}>
              <TextField
                label="Response Status Code"
                name="responseStatusCode"
                fullWidth
                variant="outlined"
                type="number"
                inputRef={register({ required: "Response Code is mandatory" })}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Response"
                name="response"
                fullWidth
                variant="outlined"
                multiline
                rows={4}
                inputRef={register({ required: "Response is mandatory" })}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="Response Headers (Optional)"
                name="responseHeaders"
                fullWidth
                variant="outlined"
                multiline
                rows={2}
                inputRef={register}
              />
            </Grid>
          </Grid>
        </Paper>

        <Typography variant="h6" gutterBottom>
          Parameterized Request Scenarios
        </Typography>
        {scenarios.map((scenario, index) => (
          <Paper key={scenario.id} style={{ padding: 16, marginBottom: 16 }}>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <TextField
                  label={`Scenario #${index + 1} Response Code`}
                  name={`parameterizedRequestScenarios[${index}].responseStatusCode`}
                  fullWidth
                  variant="outlined"
                  type="number"
                  inputRef={register({ required: true })}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  label={`Scenario #${index + 1} Response`}
                  name={`parameterizedRequestScenarios[${index}].response`}
                  fullWidth
                  variant="outlined"
                  multiline
                  rows={4}
                  inputRef={register({ required: true })}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  label={`Scenario #${index + 1} Response Headers (Optional)`}
                  name={`parameterizedRequestScenarios[${index}].responseHeaders`}
                  fullWidth
                  variant="outlined"
                  multiline
                  rows={2}
                  inputRef={register}
                />
              </Grid>

              <Grid item xs={12}>
                <Button
                  variant="outlined"
                  color="primary"
                  onClick={() => addSubScenario(index)}
                >
                  Add Sub-Scenario
                </Button>
              </Grid>
              {watch(`parameterizedRequestScenarios[${index}].scenarios`)?.map(
                (subScenario, subIndex) => (
                  <Paper
                    key={subIndex}
                    style={{ padding: 16, marginBottom: 16 }}
                  >
                    <Typography>
                      Sub-Scenario #{subIndex + 1}
                    </Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={6}>
                        <TextField
                          label="Unique Identifier"
                          name={`parameterizedRequestScenarios[${index}].scenarios[${subIndex}].uniqueIdentifier`}
                          fullWidth
                          variant="outlined"
                          inputRef={register}
                        />
                      </Grid>
                      <Grid item xs={12}>
                        <TextField
                          label="Request URL Query Parameters (Optional)"
                          name={`parameterizedRequestScenarios[${index}].scenarios[${subIndex}].requestURLQueryParameters`}
                          fullWidth
                          variant="outlined"
                          multiline
                          rows={2}
                          inputRef={register}
                        />
                      </Grid>
                      <Grid item xs={12}>
                        <TextField
                          label="Request Payload (Optional)"
                          name={`parameterizedRequestScenarios[${index}].scenarios[${subIndex}].requestPayload`}
                          fullWidth
                          variant="outlined"
                          multiline
                          rows={2}
                          inputRef={register}
                        />
                      </Grid>
                    </Grid>
                  </Paper>
                )
              )}
              <Grid item xs={12}>
                <IconButton onClick={() => remove(index)}>
                  <Remove />
                </IconButton>
              </Grid>
            </Grid>
          </Paper>
        ))}
        <Button variant="outlined" color="primary" onClick={addScenario}>
          Add Parameterized Scenario
        </Button>

        <Button
          type="submit"
          variant="contained"
          color="primary"
          style={{ marginTop: 16 }}
        >
          Submit
        </Button>
      </form>
    </Container>
  );
};

export default MockDataForm;
